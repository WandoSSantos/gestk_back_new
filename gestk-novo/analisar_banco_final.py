#!/usr/bin/env python3
"""
Script para analisar a estrutura do banco de dados db_gestk
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestk.settings')
django.setup()

from django.db import connection
from django.contrib.contenttypes.models import ContentType
from apps.core.models import Contabilidade, Usuario
from apps.pessoas.models import PessoaJuridica, PessoaFisica, Contrato
from apps.contabil.models import LancamentoContabil
from apps.fiscal.models import NotaFiscal
from apps.funcionarios.models import Funcionario

def analisar_tabelas():
    """Analisar todas as tabelas do banco"""
    
    print("üîç AN√ÅLISE DO BANCO DE DADOS DB_GESTK")
    print("=" * 60)
    
    # Usar Django ORM para contar registros
    print(f"\nüìä CONTAGEM DE REGISTROS:")
    print("-" * 40)
    
    try:
        contabilidades = Contabilidade.objects.count()
        print(f"‚úÖ Contabilidades: {contabilidades:,}")
    except Exception as e:
        print(f"‚ùå Contabilidades: ERRO - {e}")
    
    try:
        usuarios = Usuario.objects.count()
        print(f"‚úÖ Usu√°rios: {usuarios:,}")
    except Exception as e:
        print(f"‚ùå Usu√°rios: ERRO - {e}")
    
    try:
        pessoas_juridicas = PessoaJuridica.objects.count()
        print(f"‚úÖ Pessoas Jur√≠dicas: {pessoas_juridicas:,}")
    except Exception as e:
        print(f"‚ùå Pessoas Jur√≠dicas: ERRO - {e}")
    
    try:
        pessoas_fisicas = PessoaFisica.objects.count()
        print(f"‚úÖ Pessoas F√≠sicas: {pessoas_fisicas:,}")
    except Exception as e:
        print(f"‚ùå Pessoas F√≠sicas: ERRO - {e}")
    
    try:
        contratos = Contrato.objects.count()
        print(f"‚úÖ Contratos: {contratos:,}")
    except Exception as e:
        print(f"‚ùå Contratos: ERRO - {e}")
    
    try:
        lancamentos = LancamentoContabil.objects.count()
        print(f"‚úÖ Lan√ßamentos Cont√°beis: {lancamentos:,}")
    except Exception as e:
        print(f"‚ùå Lan√ßamentos Cont√°beis: ERRO - {e}")
    
    try:
        notas_fiscais = NotaFiscal.objects.count()
        print(f"‚úÖ Notas Fiscais: {notas_fiscais:,}")
    except Exception as e:
        print(f"‚ùå Notas Fiscais: ERRO - {e}")
    
    try:
        funcionarios = Funcionario.objects.count()
        print(f"‚úÖ Funcion√°rios: {funcionarios:,}")
    except Exception as e:
        print(f"‚ùå Funcion√°rios: ERRO - {e}")
    
    print("\n" + "=" * 60)
    print("üè¢ AN√ÅLISE DE CARTEIRA (Clientes por Contabilidade)")
    print("=" * 60)
    
    # Analisar carteira
    try:
        contabilidades = Contabilidade.objects.all()
        
        for contabilidade in contabilidades:
            contratos_ativos = Contrato.objects.filter(
                contabilidade=contabilidade, 
                ativo=True
            ).count()
            
            contratos_inativos = Contrato.objects.filter(
                contabilidade=contabilidade, 
                ativo=False
            ).count()
            
            total_clientes = contratos_ativos + contratos_inativos
            
            print(f"üìä {contabilidade.razao_social[:30]:30} | Total: {total_clientes:3} | Ativos: {contratos_ativos:3} | Inativos: {contratos_inativos:3}")
    
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de carteira: {e}")
    
    print("\n" + "=" * 60)
    print("üë• AN√ÅLISE DE CLIENTES (Dados Cont√°beis)")
    print("=" * 60)
    
    # Analisar clientes com dados cont√°beis
    try:
        contratos_ativos = Contrato.objects.filter(ativo=True).select_related('contabilidade')
        
        print(f"üìã Clientes com contratos ativos: {contratos_ativos.count()}")
        
        # Contar por tipo de cliente
        pessoa_juridica_ct = ContentType.objects.get_for_model(PessoaJuridica)
        pessoa_fisica_ct = ContentType.objects.get_for_model(PessoaFisica)
        
        contratos_pj = contratos_ativos.filter(content_type=pessoa_juridica_ct).count()
        contratos_pf = contratos_ativos.filter(content_type=pessoa_fisica_ct).count()
        
        print(f"  ‚Ä¢ Pessoas Jur√≠dicas: {contratos_pj}")
        print(f"  ‚Ä¢ Pessoas F√≠sicas: {contratos_pf}")
        
        # Mostrar alguns exemplos de contratos com PJ
        contratos_pj_exemplos = contratos_ativos.filter(content_type=pessoa_juridica_ct)[:10]
        
        print(f"\nüìã Exemplos de clientes PJ:")
        for contrato in contratos_pj_exemplos:
            if contrato.cliente:
                lancamentos_count = LancamentoContabil.objects.filter(contrato=contrato).count()
                notas_count = NotaFiscal.objects.filter(contrato=contrato).count()
                
                print(f"üè¢ {contrato.cliente.razao_social[:25]:25} | Lan√ßamentos: {lancamentos_count:3} | Notas: {notas_count:3}")
    
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de clientes: {e}")
    
    print("\n" + "=" * 60)
    print("üë§ AN√ÅLISE DE USU√ÅRIOS (Atividades)")
    print("=" * 60)
    
    # Analisar usu√°rios
    try:
        usuarios = Usuario.objects.select_related('contabilidade').all()
        
        for usuario in usuarios:
            contabilidade_nome = usuario.contabilidade.razao_social if usuario.contabilidade else "Sem contabilidade"
            etl = "‚úÖ" if usuario.pode_executar_etl else "‚ùå"
            admin = "‚úÖ" if usuario.pode_administrar_usuarios else "‚ùå"
            
            print(f"üë§ {usuario.username:15} | {usuario.tipo_usuario:12} | {contabilidade_nome[:20]:20} | ETL: {etl} | Admin: {admin}")
    
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de usu√°rios: {e}")
    
    print("\n" + "=" * 60)
    print("üìä MAPEAMENTO PARA ENDPOINTS")
    print("=" * 60)
    
    print("\nüéØ ENDPOINTS DE CARTEIRA:")
    print("  ‚Ä¢ /api/gestao/carteira/clientes/ - Lista clientes por status")
    print("  ‚Ä¢ /api/gestao/carteira/categorias/ - Agrega√ß√µes por regime fiscal")
    print("  ‚Ä¢ /api/gestao/carteira/evolucao/ - Evolu√ß√£o mensal")
    
    print("\nüéØ ENDPOINTS DE CLIENTES:")
    print("  ‚Ä¢ /api/gestao/clientes/lista/ - Tabela por compet√™ncia")
    print("  ‚Ä¢ /api/gestao/clientes/detalhes/ - Visualiza√ß√£o detalhada")
    print("  ‚Ä¢ /api/gestao/clientes/socios/ - S√≥cio majorit√°rio")
    
    print("\nüéØ ENDPOINTS DE USU√ÅRIOS:")
    print("  ‚Ä¢ /api/gestao/usuarios/lista/ - Lista de usu√°rios")
    print("  ‚Ä¢ /api/gestao/usuarios/atividades/ - Atividades por usu√°rio")
    print("  ‚Ä¢ /api/gestao/usuarios/produtividade/ - Relat√≥rios de produtividade")
    
    print("\n" + "=" * 60)
    print("üîó ESTRUTURA DE DADOS IDENTIFICADA")
    print("=" * 60)
    
    print("\nüìã TABELAS PRINCIPAIS:")
    print("  ‚Ä¢ core_contabilidades - Contabilidades")
    print("  ‚Ä¢ core_usuarios - Usu√°rios do sistema")
    print("  ‚Ä¢ pessoas_juridicas - Pessoas jur√≠dicas (clientes)")
    print("  ‚Ä¢ pessoas_fisicas - Pessoas f√≠sicas (clientes)")
    print("  ‚Ä¢ pessoas_contratos - Contratos (Generic FK)")
    print("  ‚Ä¢ contabil_lancamentos - Lan√ßamentos cont√°beis")
    print("  ‚Ä¢ fiscal_notas_fiscais - Notas fiscais")
    print("  ‚Ä¢ funcionarios_funcionario - Funcion√°rios")
    
    print("\nüîó RELACIONAMENTOS:")
    print("  ‚Ä¢ Contabilidade ‚Üí Contratos ‚Üí Cliente (PJ/PF)")
    print("  ‚Ä¢ Contrato ‚Üí Lan√ßamentos Cont√°beis")
    print("  ‚Ä¢ Contrato ‚Üí Notas Fiscais")
    print("  ‚Ä¢ Contrato ‚Üí Funcion√°rios")
    print("  ‚Ä¢ Contabilidade ‚Üí Usu√°rios")

if __name__ == "__main__":
    analisar_tabelas()
